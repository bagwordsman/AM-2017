// cta (call to action)

// new version:
// - old version (everything wrapped in anchor link) causing img to duplicate
// - new version uses bg image that can be removed at small sizes.
// 550px / 660px

.in-page-cta {
  position : relative;
  display : block;
  font-size : 2.1rem;
  // link
  .overlay {
    z-index: 1;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    // hover styles - affect divider
    &:hover +.cta-title .divider {
      bottom : -5px;
      @media (min-width: 550px) {
        bottom : 0;
        left : -15px;
      }
    }
  }

  h3 {
    text-shadow : $text-outline;
    margin : 0;
  }
  

  // output different colours - text and bg
  $colours : 'green', 'orange', 'blue', 'red';   
  $colour_codes : $green, $orange, $blue, $red;
  @for $i from 1 through length($colours) {
    &.#{nth($colours, $i)} {
      background-color : nth($colour_codes, $i);
      .cta-text,
      .divider:before,
      .divider:after {
        background-color : nth($colour_codes, $i);
      }
    }
  }

  @media (min-width: 550px) {
    font-size : 2.4rem;
    &:after {
      content : "";
      clear : both;
      display : block;
    }
  }

}


.cta-title,
.cta-text {
  display : block;
  width : 100%;
  padding : 2.5rem 2.5%;
  box-sizing : border-box;
  text-align : center;
  color : $white;
  
  @media (min-width: 550px) {
    
    // padding : 5rem 5%;
    width : 50%;
    float : left;
    height : 160px;
    padding : 0 5%;
    line-height : 160px; 
  }
  
}


.cta-title {
  position : relative;
  background-size : cover;
  background-repeat : no-repeat;
  padding : 5rem 2.5%;
  overflow : hidden; // contain the divider

  // divider / pointer
  .divider {
    left : 0;
    bottom : -20px;
    transition : all ease-in-out .3s;
    @media (min-width: 550px) {
      width : 100%;
      height : 100%;
      top : 0;
      // top and bottom
      &:before,
      &:after {
        // left : auto;
        top : 0;
        bottom : 0;
        width : 100%;
        height : 100%;
        left : 100%;
        z-index : 2;
      }
      // top
      &:before {
        transform : skew(25deg, 0deg);
      }
      // bottom
      &:after {
        transform : skew(-25deg, 0deg);
      }
    }
  }
}